generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Access {
  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  id        Int       @id @default(autoincrement())
  userAgent String?
  userId    String    @db.VarChar(100)
  apiName   String?   @db.VarChar(100)
  ip        String?   @db.VarChar(100)
  User      User      @relation(fields: [userId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Group {
  id                Int             @id @default(autoincrement())
  domain            String          @unique @db.VarChar(20)
  published         Boolean?        @default(false)
  createrId         String          @db.VarChar(100)
  createdAt         DateTime        @default(now()) @db.Timestamptz(3)
  description       String?         @db.VarChar(100)
  title             String          @db.VarChar(50)
  totalViews        Int             @default(0)
  lastPostCreatedAt DateTime?
  todayViews        Int             @default(0)
  weeklyAvgPost     Float           @default(0)
  User              User            @relation(fields: [createrId], references: [id])
  LinksOnGroups     LinksOnGroups[]
  TagsOnGroups      TagsOnGroups[]
  Views             Views[]
}

model Link {
  id                Int             @id @default(autoincrement())
  url               String          @unique
  description       String?         @db.VarChar(100)
  imagePath         String?         @db.VarChar(500)
  rssUrl            String?         @db.VarChar(500)
  title             String          @db.VarChar(50)
  scrapAt           DateTime?
  type              BLOG_TYPE?
  lastPostCreatedAt DateTime?
  LinksOnGroups     LinksOnGroups[]
  Post              Post[]
}

model LinksOnGroups {
  groupId    Int
  linkId     Int
  assignedAt DateTime @default(now()) @db.Timestamptz(3)
  Group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  Link       Link     @relation(fields: [linkId], references: [id])

  @@id([groupId, linkId])
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(50)
  linkId      Int
  createdAt   DateTime
  description String?  @db.VarChar(100)
  url         String   @unique
  Link        Link     @relation(fields: [linkId], references: [id])
}

model Tag {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(20)
  TagsOnGroups TagsOnGroups[]
}

model TagsOnGroups {
  groupId    Int
  tagId      Int
  assignedAt DateTime @default(now()) @db.Timestamptz(3)
  Group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  Tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([groupId, tagId])
}

model User {
  id           String   @id @unique @db.VarChar(100)
  email        String?  @unique @db.VarChar(100)
  name         String   @db.VarChar(50)
  profileImage String?  @db.VarChar(500)
  refreshToken String?  @unique @db.VarChar(200)
  Access       Access[]
  Group        Group[]
}

model Views {
  date        String @db.VarChar(8)
  count       Int
  groupDomain String @db.VarChar(20)
  Group       Group  @relation(fields: [groupDomain], references: [domain], onDelete: Cascade)

  @@id([groupDomain, date])
}

enum BLOG_TYPE {
  NAVER
  VELOG
  TISTORY
  BRUNCH
  MEDIUM
  TWIITCH
  YOUTUBE
  RSS
}
